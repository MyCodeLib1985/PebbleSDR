//GPL license and attributions are in gpl.h and terms are included in this file by reference
#include "gpl.h"
#include "baudotcode.h"
#include "global.h"

/*
 * Adopted from unreleased MBATOR 1985 Richard Landsman, which was itself adapted from SuperRat 1983
 * See superratt-baudot.txt and superratt-cw.txt in references folder
 *
*/


#include "ctype.h" //Just for toupper() initially

BaudotCode::BaudotCode()
{


}

/*
Translated ch from one code to another, returns new character
If translated code can't be printed in standard ASCII, a the returned
value is greater than 127 and can be used as an index into extcode[]
to return an appropriate string representation.
If the code is a shift character, then shift is also changed and returned
to calling routine.
*/

//ch = char to be translated
//*shift = last shift used (new value is returned)
char BaudotCode::baudotToAscii(char ch, int* shift,TRANSLATION_CODES code)  /* Baudot Translate */
{
    quint8 lookup = ch;

    if (ch==BLTR) {
        *shift=LTR;  /* Ltr */
        return 0;
    } else if (ch==BFIG) {
        *shift=FIG;  /* Fig */
        return 0;
    } else if (ch==BNAT) {
        *shift=NAT;  /* National */
        return 0;
    }
    /* Not a shift char, go ahead and translate */
    switch (code)
    {
        case INTERNAT:  /*International*/
            if ((*shift==LTR)||(*shift==NAT)) /* Letter and Nat */
                ch=bStandardLetter[lookup];
            else
                ch=bInternationalFigure[lookup];
            break;
        case MILITARY:  /*Military*/
            if ((*shift==LTR)||(*shift==NAT)) /* Letter and Nat */
                ch=bStandardLetter[lookup];
            else;
                ch=bMilitaryFigure[lookup];
            break;
        case WEATHER:  /*Weather*/
            if ((*shift==LTR)||(*shift==NAT)) /* Letter and Nat */
                ch=bStandardLetter[lookup];
            else
                ch=bWeatherFigure[lookup];
            break;
        case ARABIC:  /*Arabic*/
            if ((*shift==LTR)||(*shift==NAT)) /* Letter and Nat */
                ch=bArabicLetter[lookup];
            else
                ch=bArabicFigure[lookup];
            break;
        case CYRILLIC:  /*Cyrillic*/
            if ((*shift==LTR)||(*shift==NAT)) /* Letter and Nat */
                ch=bCyrillicLetter[lookup];
            else
                ch=bCyrillicFigure[lookup];
            break;
        case GREEK:  /*Greek*/
            if (*shift==LTR)
                ch=bGreekLetter[lookup];
            if (*shift==FIG)
                ch=bGreekFigure[lookup];
            if (*shift==NAT)
                ch=bGreekNationalFigure[lookup];
            break;
    } /* End switch code */

    return ch;
} /* End of chtran */

/*Returns baudot char or shift if new shift is req*/
char BaudotCode::asciiToBaudot(char ch, int* shift)
{
    ch = aStandardBaudot[toupper(ch)];	/*Convert to baudot */
    if (ch&0x20)
        *shift=FIG;
    else
        *shift=LTR;
    return ch;
}






/*
** Translate Ascii to 5 Bit Codes
** Baudot codes in ascii order,bit 5=fig shift req
*/
const char BaudotCode::aStandardBaudot[] = {
    0x00,0x04,0x04,0x04,0x04,0x04,0x04,0x25,0x04,0x04,0x02,0x02,0x02,0x08,0x04,0x04,    //00-0F
    0x04,0x04,0x04,0x04,0x04,0x04,0x04,0x04,0x04,0x04,0x04,0x1B,0x04,0x04,0x04,0x1F,    //10-1F
    0x04,0x2D,0x31,0x34,0x29,0x04,0x3A,0x2B,0x2F,0x32,0x04,0x04,0x2C,0x23,0x3C,0x3D,    //20-2F
    0x36,0x37,0x33,0x21,0x2A,0x30,0x35,0x27,0x26,0x38,0x2E,0x3E,0x04,0x04,0x04,0x39,    //30-3F
    0x04,0x03,0x19,0x0E,0x09,0x01,0x0D,0x1A,0x14,0x06,0x0B,0x0F,0x12,0x1C,0x0C,0x18,    //40-4F
    0x16,0x17,0x0A,0x05,0x10,0x07,0x1E,0x13,0x1D,0x15,0x11,0x00,0x00,0x00,0x00,0x00     //50-5F
};

/*
Translate 5 Bit codes into ascii
Ref: List of special RTTY & CW alphabets and codes
     by: Klingenfuss Pub by: Universal Electronics
     Ref Data for Radio Engineers
     Pg35-39 5 unit teleprinter code alaphabets
*/

/* If x is a Baudot character, then b_******[x] is the Ascii equivalent */
//Standard Letter Shift
const char BaudotCode::bStandardLetter[] = {
    '\0',   'E',    '\n',   'A',    ' ',    'S',    'I',    'U',
    '\r',   'D',	'R',	'J',	'N',	'F',	'C',	'K',
    'T',	'Z',	'L',	'W',	'H',	'Y',	'P',	'Q',
    'O',	'B',	'G',	' ',	'M',	'X',	'V',	' '
};

//Standard Figure Shift
const char BaudotCode::bStandardFigure[] = {
    '\0',	'3',	'\n',	'-',	' ',	'\a',	'8',	'7',
    '\r',	'$',	'4',	'\'',	',',	'!',	':',	'(',
    '5',	'"',	')',	'2',	'#',	'6',	'0',	'1',
    '9',	'?',	'&',	' ',	'.',	'/',	';',	' '
};

//International Figure Shift
const char BaudotCode::bInternationalFigure[] = {
    0x00,   0x33,   0x0a,   0x2d,   0x20,   0x27,   0x38,   0x37,
    0x0d,   0x84,   0x34,   0x83,   0x2c,   0x86,   0x3a,   0x28,
    0x35,   0x2b,   0x29,   0x32,   0x86,   0x36,   0x30,   0x31,
    0x39,   0x3f,   0x86,   0x81,   0x2e,   0x2f,   0x3d,   0x80
};

//Military Figure Shift
const char BaudotCode::bMilitaryFigure[] = {
    0x00,   0x33,   0x0a,   0x2d,   0x20,   0x83,   0x38,   0x37,
    0x0d,   0x24,   0x34,   0x27,   0x2c,   0x21,   0x3a,   0x28,
    0x35,   0x22,   0x29,   0x32,   0x85,   0x36,   0x30,   0x31,
    0x39,   0x3f,   0x26,   0x81,   0x2e,   0x2f,   0x3b,   0x80
};

//Weather Figure Shift
const char BaudotCode::bWeatherFigure[] = {
    0x00,   0x33,   0x0a,   0x8a,   0x20,   0x83,   0x38,   0x37,
    0x0d,   0x8b,   0x34,   0x8f,   0x94,   0x8c,   0x94,   0x90,
    0x35,   0x2b,   0x91,   0x32,   0x8e,   0x36,   0x30,   0x31,
    0x39,   0x92,   0x8d,   0x81,   0x2e,   0x2f,   0x93,   0x80
};

//Arabic Letter Shift
const char BaudotCode::bArabicLetter[] = {
    0x00,   0x74,   0x9e,   0x73,   0x20,   0x9f,   0x62,   0x74,
    0x6b,   0x71,   0x64,   0x68,   0x6e,   0x66,   0x79,   0x68,
    0x75,   0x73,   0x6a,   0xa0,   0xa1,   0x72,   0x67,   0x69,
    0x74,   0x61,   0xa1,   0x81,   0x6d,   0x73,   0xa2,   0x80
};

//Arabic Figure Shift
const char BaudotCode::bArabicFigure[] = {
    0x00,   0x37,   0x84,   0x73,   0x20,   0x79,   0x32,   0x33,
    0x6b,   0x71,   0x36,   0x68,   0x6e,   0x61,   0x79,   0x68,
    0x35,   0x73,   0x6a,   0x38,   0x2f,   0x34,   0x30,   0x39,
    0x31,   0xa1,   0xa1,   0x81,   0x6d,   0x73,   0x6c,   0x80
};

//Cyrillic Letter Shift
const char BaudotCode::bCyrillicLetter[] = {
    0x00,   0xa8,   0x0a,   0x66,   0x20,   0x79,   0x68,   0x7a,
    0x0d,   0x77,   0x6e,   0x6f,   0x62,   0x61,   0x6d,   0x6c,
    0x67,   0xa9,   0x64,   0x6b,   0x72,   0xaa,   0x63,   0x75,
    0xab,   0x74,   0x70,   0x81,   0xac,   0x73,   0x69,   0x80
};

//Cyrillic Figure Shift
const char BaudotCode::bCyrillicFigure[] = {
    0x00,   0x33,   0x0a,   0x65,   0x20,   0xaf,   0x38,   0x37,
    0x0d,   0x6a,   0x34,   0x86,   0x2e,   0xaa,   0x86,   0x25,
    0x35,   0x2f,   0x27,   0x32,   0x86,   0x36,   0x30,   0x31,
    0x39,   0x2c,   0x2b,   0x81,   0x2d,   0x3a,   0x3f,   0x80
};

//Greek Letter shift
const char BaudotCode::bGreekLetter[] = {
    0x00,   0x45,   0x0a,   0x41,   0x20,   0x53,   0x49,   0x55,
    0x0d,   0x44,   0x52,   0x4a,   0x4e,   0x46,   0x43,   0x4b,
    0x54,   0x5a,   0x4c,   0x57,   0x48,   0x59,   0x50,   0x51,
    0x4f,   0x42,   0x47,   0x1b,   0x4d,   0x58,   0x56,   0x1f
};

//Greek Figure Shift
const char BaudotCode::bGreekFigure[] = {
    0x00,   0x33,   0x0a,   0x2d,   0x20,   0x07,   0x38,   0x37,
    0x0d,   0x80,   0x34,   0x27,   0x2c,   0x21,   0x3a,   0x28,
    0x35,   0x22,   0x29,   0x32,   0x23,   0x36,   0x30,   0x31,
    0x39,   0x3f,   0x26,   0x1b,   0x2e,   0x2f,   0x3b,   0x1f
};

//Greek National Figure Shift
const char BaudotCode::bGreekNationalFigure[] = {
    0x00,   0x33,   0x0a,   0x2d,   0x20,   0x07,   0x38,   0x37,
    0x0d,   0x80,   0x34,   0x27,   0x2c,   0x21,   0x3a,   0x28,
    0x35,   0x22,   0x29,   0x32,   0x23,   0x36,   0x30,   0x31,
    0x39,   0x3f,   0x26,   0x1b,   0x2e,   0x2f,   0x3b,   0x1f
};



